{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","teks","pilihan","changedTeks","copied","kotakCopyRef","React","createRef","kotakAsli","str","replace","match","hex","String","fromCodePoint","Number","parseInt","max","Math","floor","random","e","this","setState","current","value","applyChanges","forceUpdate","length","text","y","convertEmoji","splices","split","u","regex","RegExp","regex2","test","finall","join","select","document","execCommand","err","setTimeout","Container","style","padding","paddingTop","Card","Body","Header","as","textAlign","Text","Form","Group","controlId","Label","Control","ref","onChange","onChangePilihan","bind","rows","onChangeTeks","Toast","show","float","delay","autohide","readOnly","onClick","copies","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06b286ae.chunk.js","sourcesContent":["import React from 'react'\nimport {Container, Card, Form, Toast} from 'react-bootstrap'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      teks : \"\",\n      pilihan : \"0\",\n      changedTeks : \"\",\n      copied : false\n    }\n\n    this.kotakCopyRef = React.createRef()\n    this.kotakAsli = React.createRef()\n    this.pilihan = React.createRef()\n  }\n\n  convertEmoji(str) {\n    return str.replace(/\\[e-([0-9a-fA-F]+)\\]/g, (match, hex) =>\n      String.fromCodePoint(Number.parseInt(hex, 16))\n    )\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  onChangeTeks(e){\n    this.setState(state => {state.teks = this.kotakAsli.current.value})\n    this.applyChanges()\n    this.forceUpdate()\n\n  }\n\n  onChangePilihan(e){\n    this.setState(state => {state.pilihan = this.pilihan.current.value})\n    this.forceUpdate()\n  }\n\n  applyChanges(){\n    let teks = this.kotakAsli.current.value\n    if(this.state.pilihan === \"1\"){\n      if(teks.length !== 0){\n        let text = \"\"\n        for(let y = 0; y < teks.length; y++){\n          if(teks[y] === 'O' || teks[y] === 'o'){\n            text += this.convertEmoji('[e-1F913]')\n          }else{\n            text += teks[y]\n          }\n        }\n        this.setState(state => {state.changedTeks = text})\n      }else{\n        this.setState(state => {state.changedTeks = \"\"})\n      }\n    }else if(this.state.pilihan === \"2\"){\n      if(teks.length !== 0){\n        let splices = teks.split(/\\b(\\s)/)\n        for(let u = 0; u < splices.length; u++){\n            let regex = new RegExp('^(k|K)(o|O)(k|K)(o|O)(h|H)$')\n            let regex2 = new RegExp('^(k|K)(o|O)(h|H)$')\n            if(regex.test(splices[u])){\n              splices[u] = \"K\" + this.convertEmoji('[e-1F913]') + \"k\" + this.convertEmoji('[e-1F913]') + \"h\"\n            }else if(regex2.test(splices[u])){\n              splices[u] = \"K\" + this.convertEmoji('[e-1F913]') + \"h\"\n            }\n        }\n        let finall = splices.join(\"\")\n        this.setState(state => {state.changedTeks = finall})\n      }else{\n        this.setState(state => {state.changedTeks = \"\"})\n      }\n    }\n  }\n\n  copies(e){\n    this.kotakCopyRef.current.select()\n    try {\n      let successful = document.execCommand('copy');\n      this.setState(state => {state.copied = true})\n    } catch(err) {\n      \n    }finally{\n      setTimeout(() => {\n        this.setState(state => {state.copied = false})\n      }, 3000)\n    }\n  }\n\n  render(){\n    return(\n      <Container style={{padding : 80, paddingTop : 50}}>\n        <Card>\n          <Card.Body>\n            <Card.Header as=\"h1\" style={{textAlign : 'center'}}>Kokoh Transformer</Card.Header>\n            <Card.Text>\n              <p style={{textAlign : 'center'}}>Ubah setiap \"O\" menjadi 🤓</p>\n              <Form.Group controlId=\"cts1\">\n                <Form.Label>Pilih Format 🤓</Form.Label>\n                <Form.Control as=\"select\" ref={this.pilihan} onChange={this.onChangePilihan.bind(this)}>\n                  <option>---</option>\n                  <option value=\"1\">Ubah semua \"O\" menjadi 🤓</option>\n                  <option value=\"2\">Kokoh Mode 🤓🤓🤓</option>\n                </Form.Control>\n              </Form.Group>\n\n              <Form.Group controlId=\"cts2\">\n                <Form.Label>Masukkan kata2 yang akan diubah menjadi 🤓</Form.Label>\n                  <Form.Group controlId=\"cts2\">\n                    <Form.Control as=\"textarea\" rows=\"3\" onChange={this.onChangeTeks.bind(this)} ref={this.kotakAsli}/>\n                  </Form.Group>\n              </Form.Group>\n\n              <Toast show={this.state.copied} style={{float: 'right'}} delay={1500} autohide>\n                <Toast.Header><span>Tercopy!</span></Toast.Header>\n              </Toast>              \n\n              <Form.Group controlId=\"cts3\">\n                <Form.Label>Hasilnya ada dibawah koh, 🤓 (Tekan kotak dibawah untuk copy)</Form.Label>\n                  <Form.Group controlId=\"cts3\">\n                    <Form.Control as=\"textarea\" rows=\"3\" readOnly ref={this.kotakCopyRef} value={this.state.changedTeks} onClick={this.copies.bind(this)}/>\n                  </Form.Group>\n              </Form.Group>\n\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Container>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}